#!/bin/bash
path_initial=$(pwd)
saved_tty_settings=$(stty -g)
pref_dir="$HOME/.local/src/dunst-build/.preferences/"

# In case user stops the script, log the interrupt action and 
# execute cleanup function "finish"
trap terminate INT

terminate() {
    log "Interrupt signal received"
    fatal "Script"
}

finish() {
    log "Exiting"
    stty "$saved_tty_settings" || 
        log "Could not restore original tty settings"

    cd "$path_initial" || 
        log "Could not move back to the initial directory" && exit 1

    rm -Rf tmp || log "Could not remove the tmp directory" && exit 1
}

# logging fn
log() {
    local color_on=$'\e[0;32m'
    local color_off=$'\e[0m'
    echo "${color_on}[$(date)]${color_off} $*" >&2
}

# error fn
fatal() {
    local color_fatal=$'\033[0;31m'
    log "${color_fatal}$* failed!"
    log "${color_fatal}    Error!"
    finish
    exit 1
}

reprefer=1
case $1 in
    overwrite)
        reprefer=0
        ;;
    "")
        reprefer=1
        ;;
    *)
        fatal "Argument parse"
        ;;
esac

# ask function
ask_pref() {
    local color_ask=$'\e[0;36m'
    local color_advice=$'\e[1;35m'
    log "$color_ask$2"
    log "$color_advice[y/n]"
    local preferences=$(cat "$pref_dir$1" || echo "")
    case $reprefer in
        1)
            case $preferences in
                0)
                    log "Found preference file $pref_dir$1"
                    log "Filling in automatically:"
                    echo "y"
                    return 0
                    ;;
                1)
                    log "Found preference file $pref_dir$1"
                    log "Filling in automatically:"
                    echo "n"
                    return 1
                    ;;
                *)
                    log "No preference file found in $pref_dir$1"
                    log "Proceeding to fill the preference"
                    ;;
            esac
            ;;
        0)
            log "Overwriting old preferences:"
            case $preferences in
                0)
                    log "Found preference file $pref_dir$1"
                    log "Old value:"
                    echo "y"
                    log "Enter the new value:"
                    ;;
                1)
                    log "Found preference file $pref_dir$1"
                    log "Old value:"
                    echo "n"
                    log "Enter the new value:"
                    ;;
                *)
                    log "No preference file found in $pref_dir$1"
                    log "Proceeding to fill the preference"
                    ;;
            esac
            ;;
        *)
            fatal "Argument parse"
            ;;
    esac
    stty -icanon min 1 time 0
    while true
    do 
        local input=$(head -c 1)
        echo ""
        case $input in 
            [Yy])
                stty "$saved_tty_settings"
                echo "0" > "$pref_dir$1"
                return 0
                ;;
            [Nn])
                stty "$saved_tty_settings"
                echo "1" > "$pref_dir$1"
                return 1
                ;;
            *)
                log "Bad input: type \"y\" or \"n\""
                ;;
        esac
    done 
    stty "$saved_tty_settings"
}

# preference function
write_pref() {
    local color_ask=$'\e[0;36m'
    local color_advice=$'\e[1;35m'
    log "$color_ask$2"
    case "$4" in
        0)
            log "Leave blank for default: $color_advice$3"
            ;;
        *)
            cat "$pref_dir$1" ||
                log "Using the default value: $3" && echo "$3" > "$pref_dir$1"

            return 0
            ;;
    esac

    local preferences=$(cat "$pref_dir$1" && echo " " || echo "")
    case $reprefer in
        1)
            case $preferences in
                "")
                    log "No preference file found in $pref_dir$1"
                    log "Proceeding to fill the preference"
                    ;;
                *)
                    log "Found preference file $pref_dir$1"
                    log "Filling in automatically:"
                    echo "$preferences"
                    return 0
                    ;;
            esac
            ;;
        0)
            log "Overwriting old preferences:"
            case $preferences in
                "")
                    log "No preference file found in $pref_dir$1"
                    log "Proceeding to fill the preference"
                    ;;
                *)
                    log "Found preference file $pref_dir$1"
                    log "Old value:"
                    echo "$preferences"
                    log "Enter the new value:"
                    ;;
            esac
            ;;
        *)
            fatal "Argument parse"
            ;;
    esac
    local input=$(head -1)
    case $input in 
        "")
            log "Using the default value: $3"
            echo "$3" > "$pref_dir$1"
            ;;
        *)
            echo "$input" > "$pref_dir$1"
            ;;
    esac
}

ask_safe() {
    local color_ask=$'\e[0;36m'
    local color_advice=$'\e[1;35m'
    log "$color_ask$*"
    log "$color_advice[Yes/No]"
    while true
    do 
        input=$(head -1)
        echo ""
        case $input in 
            [Yy][Ee][Ss])
                return 0
                ;;
            [Nn][Oo])
                return 1
                ;;
            *)
                log "Bad input: type \"Yes\" or \"No\""
                ;;
        esac
    done 
}

mkdir --parents "$pref_dir" || 
    fatal "Creation of .local/src/dunst-build/.preferences directory"

rm -Rf ~/.local/src/dunst-build/* || fatal "Cleaning up .local/src/dunst-build"
cp -R ./* ~/.local/src/dunst-build/ || fatal "Moving sources to .local/src/dunst-build"

newpreflist=$( (cat ~/.local/src/.preflist; echo "dunst-build") | sort | uniq ) ||
    fatal "Getting preference list from .local/src"

echo "$newpreflist" > ~/.local/src/.preflist || 
    fatal "Updating preference list"

ask_pref "MBROLA" \
    "Do you wish to install MBROLA?"

case $? in
    0)
        log "Installing MBROLA"
        sudo cp MBROLA/Bin/mbrola /usr/bin/mbrola || fatal "Installing MBROLA"
        sudo mkdir --parents /usr/share/mbrola/ || 
            fatal "/usr/share/mbrola directory setup"

        sudo cp MBROLA/us* /usr/share/mbrola || 
            fatal "Mbrola voices copy"

        ;;
    1)
        log "Skipping MBROLA installation"
        ;;
    *)
        fatal "Ask"
        ;;
esac

log "Installing dependencies"
sudo pacman -S libnotify espeak-ng dunst speech-dispatcher ||
    fatal "Installing dependencies"

write_pref "transparency" \
    "Enter notification transparency [0;100]:" \
    "30" \
    "0"

ask_pref "custom_sizes" \
    "Do you wish to customise/reconfigure notification sizes and positions?"

size_conf="$?"
while true
do
    write_pref "icon_size" \
        "Enter maximum icon size in pixels:" \
        "128" \
        "$size_conf"
    
    write_pref "notification_height" \
        "Enter minimum notification height in pixels:" \
        "30" \
        "$size_conf"

    write_pref "notification_limit" \
        "Enter maximum amount of displayed notifications:" \
        "5" \
        "$size_conf"

    write_pref "notification_width" \
        "Enter the notification width in pixels:"\
        "400" \
        "$size_conf"

    write_pref "position_left" \
        "Enter the amount of pixels to shift the notification to the left from the upper right corner:" \
        "35" \
        "$size_conf"

    write_pref "position_down" \
        "Enter the amount of pixels to shift the notification down:" \
        "55" \
        "$size_conf"

    write_pref "separator_height" \
        "Enter the separator height in pixels:" \
        "2" \
        "$size_conf"

    write_pref "frame_width" \
        "Enter the frame width in pixels:" \
        "2" \
        "$size_conf"

    write_pref "separator_padding" \
        "Enter the padding between text and separator in pixels:" \
        "8" \
        "$size_conf"

    write_pref "horizontal_padding" \
        "Enter the horizontal text padding in pixels:" \
        "8" \
        "$size_conf"

    write_pref "line_height" \
        "Enter the minimum line height in pixels:" \
        "0" \
        "$size_conf"

    write_pref "icon_position" \
        "Enter the side you want the icon to be displayed on [left/right]:" \
        "left" \
        "$size_conf"

    [ "$size_conf" != "0" ] && ( cat ${pref_dir}shrink || echo "1" > ${pref_dir}shrink ) ||
        ask_pref "shrink" \
        "Do you want to shrink the window if the notification is smaller than the width (not recommended)"

    ask_safe "Is this configuration of sizes and positions correct?" && break ||
        size_conf=0

done

ask_pref "markup" \
    "Do you want notifications to support html markup formatting?"

mkdir --parents ~/.config/dunst || fatal "Config directory creation"
rm -Rf ~/.config/dunst/* || fatal "Config directory cleanup"
cp config/* ~/.config/dunst/ || fatal "Copying new configs to .config/dunst"
